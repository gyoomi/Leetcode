package com.gyoomi.p287;

/**
 * 287. 寻找重复数
 *
 *      给定一个包含 n + 1 个整数的数组 nums，
 *      其数字都在 1 到 n 之间（包括 1 和 n），
 *      可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。
 *
 *      示例 1:
 *      输入: [1,3,4,2,2]
 *      输出: 2
 *
 *      示例 2:
 *      输入: [3,1,3,4,2]
 *      输出: 3
 *
 *      说明：
 *          1. 不能更改原数组（假设数组是只读的）。
 *          2. 只能使用额外的 O(1) 的空间。
 *          3. 时间复杂度小于 O(n2) 。
 *          4. 数组中只有一个重复的数字，但它可能不止重复出现一次。
 *
 *
 *      假设数组中没有重复，那我们可以做到这么一点，就是将数组的下标和1到n每一个数一对一的映射起来。
 *      比如数组是213,则映射关系为0->2, 1->1, 2->3。假设这个一对一映射关系是一个函数f(n)，其中n是下标，
 *      f(n)是映射到的数。如果我们从下标为0出发，根据这个函数计算出一个值，以这个值为新的下标，
 *      再用这个函数计算，以此类推，直到下标超界。实际上可以产生一个类似链表一样的序列。比如在这个例子中有两个下标的序列，0->2->3。
 *
 *      但如果有重复的话，这中间就会产生多对一的映射，
 *      比如数组2131,则映射关系为0->2, {1，3}->1, 2->3。
 *      这样，我们推演的序列就一定会有环路了，这里下标的序列是0->2->3->1->1->1->1->...，而环的起点就是重复的数。
 *
 *      所以该题实际上就是找环路起点的题。过程是这样的：
 *          我们先用快慢两个下标都从0开始，快下标每轮映射两次，慢下标每轮映射一次，
 *          直到两个下标再次相同。这时候保持慢下标位置不变，再用一个新的下标从0开始，
 *          这两个下标都继续每轮映射一次，当这两个下标相遇时，就是环的起点，也就是重复的数。
 * @author Leon
 * @version 2019/6/2 22:50
 */

class Solution {

    public int findDuplicate(int[] nums) {
        int length = nums.length;
        if (length > 1) {
            // 找到快慢指针相遇的地方
            int slow = nums[0];
            int fast = nums[nums[0]];
            while (fast != slow) {
                slow = nums[slow];
                fast = nums[nums[fast]];
            }

            // 用一个新指针从头开始，直到和慢指针相遇
            fast = 0;
            while (fast != slow) {
                slow = nums[slow];
                fast = nums[fast];
            }
            return slow;
        }
        return -1;
    }

}

public class Main {

    public static void main(String[] args) throws Exception {

    }

}
